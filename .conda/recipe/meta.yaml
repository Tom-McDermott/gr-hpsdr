{% set oot_name = "hpsdr" %}
{% set name = "gnuradio-" + oot_name %}
{% set version = (environ.get("GIT_DESCRIBE_TAG_PEP440", "0.0.0." + datetime.datetime.now().strftime("%Y%m%d") + ".dev+" + environ.get("GIT_DESCRIBE_HASH", "local"))|string) %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # use local path or git repository depending on if the build is local or done on CI
  path: "../.."  # [not os.environ.get("CI")]
  git_url: {{ environ.get('FEEDSTOCK_ROOT', "../..") }}  # [os.environ.get("CI")]

build:
  number: 0
  skip: true  # [win]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - cmake
    - git
    - ninja
    - pkg-config
    # cross-compilation requirements
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
    - numpy                               # [build_platform != target_platform]
    - pybind11                            # [build_platform != target_platform]

  host:
    - gmp  # [linux]
    # the following two entries are for generating builds against specific GR versions
    - gnuradio-core  # [not gnuradio_extra_pin]
    - gnuradio-core {{ gnuradio_extra_pin }}.*  # [gnuradio_extra_pin]
    - pip  # [win]
    - pybind11
    - python
    - numpy

  run:
    - numpy
    - python

test:
  commands:
    # verify that (some) headers get installed
    - test -f $PREFIX/include/gnuradio/{{ oot_name }}/api.h  # [not win]
    - if not exist %PREFIX%\\Library\\include\\gnuradio\\{{ oot_name }}\\api.h exit 1  # [win]

    # verify that libraries get installed
    - test -f $PREFIX/lib/lib{{ name }}${SHLIB_EXT}  # [not win]
    - if not exist %PREFIX%\\Library\\bin\\{{ name }}.dll exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\{{ name }}.lib exit 1  # [win]

    # verify that (some) GRC blocks get installed
    {% set blocks = ["hermesNB", "hermesWB"] %}
    {% for block in blocks %}
    - test -f $PREFIX/share/gnuradio/grc/blocks/{{ oot_name }}_{{ block }}.block.yml  # [not win]
    - if not exist %PREFIX%\\Library\\share\\gnuradio\\grc\\blocks\\{{ oot_name }}_{{ block }}.block.yml exit 1  # [win]
    {% endfor %}

  imports:
    # verify that the python module imports
    - gnuradio.{{ oot_name }}

about:
  home: https://github.com/Tom-McDermott/gr-hpsdr
  license: GPL-2.0-or-later
  license_file: license.txt
  summary: GNU Radio module for HPSDR Hermes / Metis, and Red Pitaya
  description: >
    GNU Radio module for HPSDR Hermes / Metis, and Red Pitaya (using OpenHPSDR
    protocol 1).

    * hermesNB sources decimated downconverted 48K-to-384K receiver complex
    stream(s), and sinks one 48k sample rate transmit complex stream.
    * hermesWB sources raw ADC samples as a vector of floats, with vlen=16384.
    Each individual vector contains time contiguous samples. However there are
    large time gaps between between vectors. This is how HPSDR produces raw
    samples, it is due to Ethernet interface rate limitations between HPSDR and
    the host computer.
